{"version":3,"file":"index.js","mappings":"2BAAA,MAAMA,EAAS,EAAQ,KAUvBC,EAAOC,QARP,SAAuBC,EAAUC,GAC/B,MAAO,CACLD,WACAC,OACAC,KAAML,IAASM,OAAO,UAE1B,C,UCRA,MAAMC,EAAQ,GA8BdN,EAAOC,QAAU,CACfM,SA5BF,SAAkBC,EAAIN,EAAUO,GAC9B,MAAMC,EAAO,CAAEF,KAAIN,WAAUO,QAI7B,OAFAH,EAAMK,KAAKD,GAEJA,CACT,EAuBEE,eApBF,SAAwBJ,GACtB,OAAOF,EAAMO,MAAKH,GAAQA,EAAKF,KAAOA,GACxC,EAmBEM,UAhBF,SAAmBN,GACjB,MAAMO,EAAQT,EAAMU,WAAUN,GAAQA,EAAKF,KAAOA,IAElD,IAAe,IAAXO,EACF,OAAOT,EAAMW,OAAOF,EAAO,GAAG,EAElC,EAWEG,aARF,SAAsBT,GACpB,OAAOH,EAAMa,QAAOT,GAAQA,EAAKD,OAASA,GAC5C,E,uBC5BAT,EAAOC,QAAUmB,QAAQ,U,uBCAzBpB,EAAOC,QAAUmB,QAAQ,S,uBCAzBpB,EAAOC,QAAUmB,QAAQ,Y,uBCAzBpB,EAAOC,QAAUmB,QAAQ,O,sBCAzBpB,EAAOC,QAAUmB,QAAQ,O,GCCrBC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAavB,QAGrB,IAAID,EAASqB,EAAyBE,GAAY,CAGjDtB,QAAS,CAAC,GAOX,OAHAyB,EAAoBH,GAAUvB,EAAQA,EAAOC,QAASqB,GAG/CtB,EAAOC,OACf,C,MCtBA,MAAM0B,EAAO,EAAQ,IACfC,EAAO,EAAQ,KACfC,EAAU,EAAQ,KAClBC,EAAW,EAAQ,KACnBC,EAAgB,EAAQ,MACxB,SACJxB,EAAQ,eACRK,EAAc,UACdE,EAAS,aACTI,GACE,EAAQ,KAENc,EAAMH,IACNI,EAASL,EAAKM,aAAaF,GAC3BG,EAAKL,EAASG,GAGpBD,EAAII,IAAIP,EAAQQ,OAAOV,EAAKW,KAAKC,UAAW,YAE5C,MAAMC,EAAU,WAIhBL,EAAGM,GAAG,cAAcC,IAClBA,EAAOD,GAAG,YAAY,EAAGvC,WAAUO,WACjC,MAAMC,EAAOH,EAASmC,EAAOlC,GAAIN,EAAUO,GAErCkC,EAAWlC,EAEjBiC,EAAOJ,KAAK5B,EAAKD,MAGjBiC,EAAOE,KAAK,UAAWb,EAAcS,EAAS,cAAcG,WAG5DD,EAAOG,UACJC,GAAGpC,EAAKD,MACRmC,KACC,UACAb,EAAcS,EAAS,GAAG9B,EAAKR,iCAInCiC,EAAGW,GAAGpC,EAAKD,MAAMmC,KAAK,YAAa,CACjCnC,KAAMC,EAAKD,KACXH,MAAOY,EAAaR,EAAKD,OACzB,IAIJiC,EAAOD,GAAG,eAAeM,IACvB,MAAMrC,EAAOE,EAAe8B,EAAOlC,IAEnC2B,EAAGW,GAAGpC,EAAKD,MAAMmC,KAAK,UAAWb,EAAcrB,EAAKR,SAAU6C,GAAK,IAIrEL,EAAOD,GAAG,cAAc,KACtB,MAAM/B,EAAOI,EAAU4B,EAAOlC,IAE1BE,IACFyB,EAAGW,GAAGpC,EAAKD,MAAMmC,KACf,UACAb,EAAcS,EAAS,GAAG9B,EAAKR,+BAIjCiC,EAAGW,GAAGpC,EAAKD,MAAMmC,KAAK,YAAa,CACjCnC,KAAMC,EAAKD,KACXH,MAAOY,EAAaR,EAAKD,QAE7B,GACA,IAGJ,MAAMuC,EAAOC,QAAQC,IAAIF,MAAQ,IAEjCf,EAAOkB,OAAOH,GAAM,IAAMI,QAAQC,IAAI,0BAA0BL,M","sources":["webpack://chatapp/./utils/messages.js","webpack://chatapp/./utils/users.js","webpack://chatapp/external commonjs \"express\"","webpack://chatapp/external commonjs \"moment\"","webpack://chatapp/external commonjs \"socket.io\"","webpack://chatapp/external node-commonjs \"http\"","webpack://chatapp/external node-commonjs \"path\"","webpack://chatapp/webpack/bootstrap","webpack://chatapp/./server.js"],"sourcesContent":["const moment = require('moment');\n\nfunction formatMessage(username, text) {\n  return {\n    username,\n    text,\n    time: moment().format('h:mm a')\n  };\n}\n\nmodule.exports = formatMessage;\n","const users = [];\n\n// Join user to chat\nfunction userJoin(id, username, room) {\n  const user = { id, username, room };\n\n  users.push(user);\n\n  return user;\n}\n\n// Get current user\nfunction getCurrentUser(id) {\n  return users.find(user => user.id === id);\n}\n\n// User leaves chat\nfunction userLeave(id) {\n  const index = users.findIndex(user => user.id === id);\n\n  if (index !== -1) {\n    return users.splice(index, 1)[0];\n  }\n}\n\n// Get room users\nfunction getRoomUsers(room) {\n  return users.filter(user => user.room === room);\n}\n\nmodule.exports = {\n  userJoin,\n  getCurrentUser,\n  userLeave,\n  getRoomUsers\n};\n","module.exports = require(\"express\");","module.exports = require(\"moment\");","module.exports = require(\"socket.io\");","module.exports = require(\"http\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const path = require('path');\nconst http = require('http');\nconst express = require('express');\nconst socketio = require('socket.io');\nconst formatMessage = require('./utils/messages');\nconst {\n  userJoin,\n  getCurrentUser,\n  userLeave,\n  getRoomUsers\n} = require('./utils/users');\n\nconst app = express();\nconst server = http.createServer(app);\nconst io = socketio(server);\n\n// Set static folder\napp.use(express.static(path.join(__dirname, 'public')));\n\nconst botName = 'Chat Bot';\n\n\n// Run when client connects\nio.on('connection', socket => {\n  socket.on('joinRoom', ({ username, room }) => {\n    const user = userJoin(socket.id, username, room);\n\n    const roomName = room;\n\n    socket.join(user.room);\n\n    // Welcome current user\n    socket.emit('message', formatMessage(botName, `Welcome to ${roomName} Room`));\n\n    // Broadcast when a user connects\n    socket.broadcast\n      .to(user.room)\n      .emit(\n        'message',\n        formatMessage(botName, `${user.username} has joined the chat`)\n      );\n\n    // Send users and room info\n    io.to(user.room).emit('roomUsers', {\n      room: user.room,\n      users: getRoomUsers(user.room)\n    });\n  });\n\n  // Listen for chatMessage\n  socket.on('chatMessage', msg => {\n    const user = getCurrentUser(socket.id);\n\n    io.to(user.room).emit('message', formatMessage(user.username, msg));\n  });\n\n  // Runs when client disconnects\n  socket.on('disconnect', () => {\n    const user = userLeave(socket.id);\n\n    if (user) {\n      io.to(user.room).emit(\n        'message',\n        formatMessage(botName, `${user.username} has left the chat`)\n      );\n\n      // Send users and room info\n      io.to(user.room).emit('roomUsers', {\n        room: user.room,\n        users: getRoomUsers(user.room)\n      });\n    }\n  });\n});\n\nconst PORT = process.env.PORT || 3000;\n\nserver.listen(PORT, () => console.log(`Server running on port ${PORT}`));\n"],"names":["moment","module","exports","username","text","time","format","users","userJoin","id","room","user","push","getCurrentUser","find","userLeave","index","findIndex","splice","getRoomUsers","filter","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","path","http","express","socketio","formatMessage","app","server","createServer","io","use","static","join","__dirname","botName","on","socket","roomName","emit","broadcast","to","msg","PORT","process","env","listen","console","log"],"sourceRoot":""}